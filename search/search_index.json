{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome-to-mkdocs","title":"Welcome to MkDocs","text":"<p>This is my personal notes on technology related that I will come across.</p>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    wiki/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"snippet/aws/","title":"Aws","text":"aws s3 list files<pre><code>aws-vault exec dev -- aws s3 ls\n\nor\n\naws-vault exec dev -- aws s3 ls s3://&lt;URL&gt;/&lt;DIR&gt;/\n</code></pre> aws s3 copy directory contents to local<pre><code>aws-vault exec dev -- aws s3 sync s3://&lt;URL&gt;/&lt;DIR&gt;/ ~/Downloads/myfolder/\n</code></pre>"},{"location":"snippet/azure/","title":"Azure","text":""},{"location":"snippet/azure/#azure","title":"azure","text":"<pre><code>az vm extension image list --location southeastasia -o table\n\naz storage account generate-sas --account-name hr3xjstoreacct001 --account-key key1 --start 2022-09-25T00:00:00Z --expiry 2022-09-26T00:00:00Z --https-only --permissions wlacu --resource-types co --services bt\n\naz monitor log-analytics workspace table list --resource-group azure-logging-uc --workspace-name VQ4F6-loganalytics --output table\n</code></pre>"},{"location":"snippet/dig/","title":"Dig","text":"dig lookup using specific dns<pre><code>dig @localhost google.com\ndig @dns.domain.local google.com\n</code></pre> dig lookup checking dns zone using specific dns<pre><code>dig +norecurse +noall +answer +comments @localhost 5.168.192.in-addr.arpa SOA | egrep 'SOA|;; flags:'\n</code></pre>"},{"location":"snippet/docker/","title":"Docker","text":"docker logs watch<pre><code>watch 'sudo docker ps --format \"{{.Names}}\" | sort | xargs --verbose --max-args=1 -- sudo docker logs --tail=8 --timestamps'\n</code></pre> docker swarm create service<pre><code>docker service create --name webserver --replicas 1 nginx\n</code></pre> docker swarm delete service<pre><code>docker service rm webserver\n</code></pre> docker swarm init<pre><code>docker swarm init --advertise-addr 192.168.11.11\n</code></pre> docker swarm node list<pre><code>docker node ls\n</code></pre> docker swarm service scaling<pre><code>docker service scale webserver=5\ndocker service scale webserver=1\ndocker service scale service01=5\ndocker service scale service01=5 service02=4\ndocker service update --replicas 2 service01\ndocker service update --replicas 2 service02\n</code></pre> docker swarm service status<pre><code>docker service ps webserver\n</code></pre>"},{"location":"snippet/fedora/","title":"Fedora","text":"fedora aws-vault install<pre><code>sudo curl -L -o /usr/local/bin/aws-vault https://github.com/99designs/aws-vault/releases/latest/download/aws-vault-linux-amd64\nsudo chmod 755 /usr/local/bin/aws-vault\n</code></pre> fedora awscli install<pre><code>curl \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o \"awscliv2.zip\"\nunzip awscliv2.zip\nsudo ./aws/install\nrm awscliv2.zip\nrm -r aws/\n</code></pre> fedora git install<pre><code>sudo yum install -y git\n</code></pre> fedora nomachine install<pre><code>sudo rpm -Uvh https://download.nomachine.com/download/8.6/Linux/nomachine-enterprise-client_8.6.1_3_x86_64.rpm\n</code></pre> fedora packer install<pre><code>sudo dnf install -y dnf-plugins-core\nsudo dnf config-manager --add-repo https://rpm.releases.hashicorp.com/fedora/hashicorp.repo\nsudo dnf -y install packer\n</code></pre> fedora pdk install<pre><code>sudo rpm -Uvh https://yum.puppet.com/puppet-tools-release-fedora-36.noarch.rpm\nsudo dnf install -y pdk\n</code></pre> fedora virtio-win install<pre><code>sudo wget https://fedorapeople.org/groups/virt/virtio-win/virtio-win.repo -O /etc/yum.repos.d/virtio-win.repo\nsudo yum install -y virtio-win\n</code></pre> fedora vscode install<pre><code>sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc\nsudo sh -c 'echo -e \"[code]\\nname=Visual Studio Code\\nbaseurl=https://packages.microsoft.com/yumrepos/vscode\\nenabled=1\\ngpgcheck=1\\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc\" &gt; /etc/yum.repos.d/vscode.repo'\ndnf check-update\nsudo dnf install -y code\ncode --install-extension hashicorp.terraform\ncode --install-extension AmazonWebServices.aws-toolkit-vscode\ncode --install-extension puppet.puppet-vscode\n</code></pre> fedora tenv install<pre><code>git clone --depth=1 https://github.com/tfutils/tfenv.git ~/.tfenv\necho 'export PATH=\"$HOME/.tfenv/bin:$PATH\"' &gt;&gt; ~/.bash_profile\nsudo ln -s ~/.tfenv/bin/* /usr/local/bin\ntfenv install latest\ntfenv use latest\n</code></pre>"},{"location":"snippet/firewall-cmd/","title":"Firewall cmd","text":"check firewall state<pre><code>sudo firewall-cmd --state\n</code></pre> list all defined firewall rules<pre><code>sudo firewall-cmd --list-all\n</code></pre> list defined firewall services<pre><code>sudo firewall-cmd --get-services\n</code></pre> show firewall service info<pre><code>sudo firewall-cmd --info-service=ssh\n</code></pre> list defined firewall rich rules<pre><code>sudo firewall-cmd --list-rich-rules\n</code></pre> remove firewall rich rules<pre><code>sudo firewall-cmd --remove-rich-rule='rule family=\"ipv4\" port port=\"8080\" protocol=\"tcp\" accept'\n</code></pre> remove firewall rich rules by service name<pre><code>sudo firewall-cmd --remove-rich-rule='rule family=\"ipv4\" service name=\"nomachine\" accept'\n</code></pre>"},{"location":"snippet/git/","title":"Git","text":"git configure ssh authentication (*nix)<pre><code>ssh-keygen -o -a 100 -t ed25519 -f ~/.ssh/id_ed25519_github -C \"ssh key for github\"\neval \"$(ssh-agent -s)\"\nssh-add ~/.ssh/id_ed25519_github\nssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts\nconfigure git app side\n</code></pre> git configure ssh authentication (windows)<pre><code>follow the same process with *nix but do ensure you use `git bash` to perform the steps\n</code></pre> git delete local branch<pre><code>git branch -d &lt;BRANCH&gt;\n</code></pre> git delete remote branch<pre><code>git push origin -d &lt;BRANCH&gt;\n</code></pre> git disable ssl verification<pre><code>git config http.sslVerify false\n</code></pre> git disable windows like line endings<pre><code>git config core.autocrlf false\n</code></pre> git fix gitignore<pre><code>git rm -r --cached .\ngit add --all; git commit -m 'fix .gitignore'; git push\n</code></pre> git update new token<pre><code>git remote set-url origin https://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@github.com/&lt;username&gt;/&lt;repo&gt;.git\n</code></pre> git merge changes from a target to desired branch<pre><code>git checkout develop\ngit merge feature_login # (1)\n</code></pre> <ol> <li> Ensure you are in the target branch first by checking it out.</li> </ol>"},{"location":"snippet/packer/","title":"Packer","text":"packer build vm<pre><code>packer validate -var-file=vars.auto.pkrvars.hcl rhel-var-disk.pkr.hcl \npacker build -var-file=vars.auto.pkrvars.hcl rhel-var-disk.pkr.hcl \n</code></pre>"},{"location":"snippet/powershell/","title":"Powershell","text":"powershell install vmware powercli module<pre><code>Install-Module -Name VMware.PowerCLI\n</code></pre> powershell import vmware powercli module<pre><code>Find-Module \"VMware.PowerCLI\" | Install-Module -Scope \"CurrentUser\" -AllowClobber\nImport-Module \"VMware.PowerCLI\"\n</code></pre> powershell powercli connect to vcenter<pre><code>Get-PowerCLIConfiguration\nSet-PowerCLIConfiguration -InvalidCertificateAction Ignore\nConnect-VIServer -Server vsphere-server\n</code></pre> powershell powercli get vm cpu memory info<pre><code>Get-Vm -Name $VmName | fl Id, Name, NumCpu, MemoryMB, VMHost\n</code></pre> powershell powercli get vm network info<pre><code>Get-VMGuest -VM $VmName | Select-Object -ExpandProperty Nics | Select-Object NetworkName, IPAddress\n(Get-Vm -Name $VmName).ExtensionData.Guest.Net.IpConfig.IpAddress\nGet-VMGuest -VM $VmName | Select-Object -ExpandProperty ExtensionData | Select-Object -ExpandProperty IpStack | Select-Object -ExpandProperty DnsConfig\nGet-VMGuest -VM $VmName | Select-Object -ExpandProperty ExtensionData | Select-Object -ExpandProperty Net | Select-Object -ExpandProperty IpConfig | Select-Object -ExpandProperty IpAddress\n</code></pre> powershell powercli get vm disk info<pre><code>Get-HardDisk -VM $VmName | Select-Object Name, @{N=\"CapacityMB\";E={$_.CapacityKB/1024}}\n</code></pre> powershell powercli get cluster info<pre><code>(Get-VM -Name $VmName | Get-Cluster | Select-Object Name).Name\n</code></pre> powershell powercli get vm datastore info<pre><code>(Get-VM -Name $VmName | Get-Datastore | Select-Object Name).Name\n</code></pre>"},{"location":"snippet/puppet_cli/","title":"Puppet cli","text":"puppet clean node certificate<pre><code>puppet node purge\npuppet ssl clean\npuppet agent -t\n</code></pre> puppet delete node certificate<pre><code>puppetserver ca clean --certname node1.example.local\n</code></pre> puppet execute specific class<pre><code>/opt/puppetlabs/bin/puppet apply -t --tags Some::class\n</code></pre> puppet facter list facts<pre><code>facter\n</code></pre> puppet facts<pre><code>sudo /opt/puppetlabs/bin/puppet facts\n</code></pre> puppet print config<pre><code>/opt/puppetlabs/bin/puppet config print\n</code></pre> puppet purge node<pre><code>puppet node purge node1.example.local\n</code></pre> puppet run agent<pre><code>sudo /opt/puppetlabs/bin/puppet agent --test\n</code></pre>"},{"location":"snippet/puppet_code/","title":"Puppet code","text":""},{"location":"snippet/puppet_code/#puppet-enable-datadog-dns-check","title":"Puppet enable datadog dns check","text":"dns_check.pp<pre><code>datadog_agent::integration { 'dns_check':\n  instances =&gt; [\n    {\n      hostname   =&gt; 'google.com',\n      nameserver =&gt; '8.8.8.8',\n      timeout    =&gt; 5,\n    },\n  ],\n}\n</code></pre> dns_check.yaml<pre><code>datadog_agent::integrations::dns_check::checks:\n  - hostname: google.com\n    nameserver: 8.8.8.8\n    timeout: 5\n</code></pre>"},{"location":"snippet/puppet_code/#puppet-enable-datadog-systemd-monitor","title":"Puppet enable datadog systemd monitor","text":"systemd.pp<pre><code>datadog_agent::integrations::systemd:\n  init_config:\n    is_k8s: false # Set true if running in a k8s environment\n  instances:\n    - unit_names: chronyd.service\n      tags:\n        - environment:production\n</code></pre> systemd.yaml<pre><code>datadog_agent::integrations:\n  systemd:\n    instances:\n      - unit_names:\n          - chronyd.service\n        tags:\n          - \"environment:production\"\n</code></pre>"},{"location":"snippet/puppet_code/#puppet-enable-systemd-timer","title":"Puppet enable systemd timer","text":"systemd.yaml<pre><code>systemd::timers:\n  \"myservice.timer\":\n    ensure: present\n    enable: true\n    active: true\n    daemon_reload: true\n    owner: root\n    group: root\n    mode: '0444'\n    timer_content: |\n      [Unit]\n      Description=myservice.timer\n      [Timer]\n      OnCalendar=daily\n      OnCalendar=*-*-* 06:00:00\n      [Install]\n      WantedBy=timers.target\n    service_content: |\n      [Unit]\n      Description=myservice.service\n      Wants=network-online.target\n      After=network-online.target\n      [Service]\n      ExecStart=/usr/bin/podman run --rm alpine:latest\n      ExecStopPost=/usr/bin/podman system prune -f\n      KillSignal=SIGQUIT\n      KillMode=mixed\n      TimeoutStopSec=60\n      Type=forking\n      [Install]\n      WantedBy=multi-user.target\n</code></pre>"},{"location":"snippet/redhat/","title":"Redhat","text":"redhat disk resize<pre><code>lvdisplay\nlvs\nlsblk \npvs\nls /sys/class/scsi_device/\necho 1 &gt; /sys/class/scsi_device/0\\:0\\:0\\:0/device/rescan\nls /sys/class/scsi_device/\ngrowpart /dev/sda 3\nlsblk \npvresize /dev/sda3\npvs\nlvextend -l +100%FREE --resizefs /dev/mapper/rhel-root\ndf -hT | grep mapper\n</code></pre> redhat docker install<pre><code>sudo yum install -y yum-utils\nsudo yum-config-manager --add-repo=https://download.docker.com/linux/centos/docker-ce.repo\nsudo yum install -y docker-ce docker-ce-cli --nobest --allowerasing\nsudo systemctl start docker\nsudo systemctl enable docker\n</code></pre> redhat htop install<pre><code>sudo dnf install -y htop\n</code></pre> redhat make install<pre><code>sudo yum install -y make\n</code></pre> redhat netstat install<pre><code>sudo dnf install -y net-tools\n</code></pre> redhat network-scripts install<pre><code>sudo dnf install -y network-scripts # (1)\n</code></pre> <ol> <li> Required for ifup/ifdown command.</li> </ol> redhat 7 powershell install<pre><code>sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc\ncurl https://packages.microsoft.com/config/rhel/7/prod.repo | sudo tee /etc/yum.repos.d/microsoft.repo\nsudo dnf install -y makecache powershell\n</code></pre> redhat 8 powershell install<pre><code>curl https://packages.microsoft.com/config/rhel/8/prod.repo | sudo tee /etc/yum.repos.d/microsoft.repo\nsudo dnf install -y powershell\npwsh\n</code></pre> redhat powershell upgrade<pre><code>sudo dnf upgrade powershell\n</code></pre> redhat subscription<pre><code>subscription-manager config --list\nsubscription-manager register\nsubscription-manager refresh\nsubscription-manager attach --auto\nsubscription-manager list --available --all\n</code></pre> redhat 7 sync time with an ntp server<pre><code>sudo ntpdate -q nz.pool.ntp.org\n</code></pre> redhat vm template prerequisite install<pre><code>yum update\nyum install -y open-vm-tools perl\n</code></pre> redhat 8 chronyc sync time<pre><code>sudo chronyc tracking\n</code></pre> redhat 7 ntpstat sync time<pre><code>sudo ntpstat\n</code></pre>"},{"location":"snippet/shell/","title":"Shell","text":"shell list top directory's size<pre><code>sudo du -h / --max-depth=1 | sort -h -r\n</code></pre> shell uninstall ipa client<pre><code>sudo ipa-client-install --uninstall\n</code></pre> shell restart named service<pre><code>sudo systemctl restart named-chroot\nsudo systemctl status named-chroot\n</code></pre> shell soft reload dns<pre><code>sudo rndc reload # (1)\n</code></pre> <ol> <li> This may not work in RedHat8; alternatively you can restart the service instead.</li> </ol> shell list dns configured<pre><code>( nmcli dev list || nmcli dev show ) 2&gt;/dev/null | grep DNS\n\nor \n\ncat /etc/resolv.conf\n</code></pre> shell show gateway<pre><code>ip route | grep default\n\nor\n\nroute -n\n\nor\n\nnetstat -r -n\n</code></pre>"},{"location":"snippet/ssh/","title":"Ssh","text":"configure ssh key-based authentication (*nix)<pre><code>ssh-keygen -o -a 100 -t ed25519 -f ~/.ssh/id_ed25519_server -C \"ssh key for remote server access\"\nssh-copy-id user@remoteserver\n</code></pre> configure ssh key-based authentication (windows-standard user)<pre><code>ssh-keygen -o -a 100 -t ed25519 -f ~/.ssh/id_ed25519_server -C \"ssh key for remote server access\"\n$authorizedKey = Get-Content -Path C:\\Users\\user\\.ssh\\id_ed25519_server.pub\n$remotePowershell = \"powershell New-Item -Force -ItemType Directory -Path C:\\Users\\user\\.ssh; Add-Content -Force -Path C:\\Users\\user\\.ssh\\authorized_keys -Value '$authorizedKey'\"\nssh username@remoteserver $remotePowershell\n</code></pre> configure ssh key-based authentication (windows-admin user)<pre><code>ssh-keygen -o -a 100 -t ed25519 -f ~/.ssh/id_ed25519_server -C \"ssh key for remote server access\"\n$authorizedKey = Get-Content -Path C:\\Users\\user\\.ssh\\id_ed25519_server.pub\n$remotePowershell = \"powershell Add-Content -Force -Path $env:ProgramData\\ssh\\administrators_authorized_keys -Value '$authorizedKey';icacls.exe \"\"$env:ProgramData\\ssh\\administrators_authorized_keys\"\" /inheritance:r /grant \"\"Administrators:F\"\" /grant \"\"SYSTEM:F\"\"\"\nssh username@remoteserver $remotePowershell\n</code></pre> configure ssh-agent to start every login<pre><code># append this on ~/.bashrc\neval \"$(ssh-agent -s)\"\nssh-add ~/.ssh/id_ed25519_server\n</code></pre>"},{"location":"snippet/ubuntu/","title":"Ubuntu","text":"ubuntu ansible install<pre><code>apt-get update\napt-get install -y ansible\npython3 -m pip install paramiko\napt-get install python3-jmespath\n</code></pre> ubuntu autocomplete install<pre><code>apt-get update\napt-get install -y bash-completion\necho \"source /etc/profile.d/bash_completion.sh\" &gt;&gt; ~/.bashrc\n</code></pre> ubuntu azure kubectl install<pre><code>rm ~/.kube/config\naz aks get-credentials --resource-group rg1 --name aks1\nkubectl run -it --rm aks-ssh --namespace gitlab-runner --image=debian:stable\napt-get update -y\napt-get install dnsutils -y\napt-get install curl -y\napt-get install netcat -y\napt-get install net-tools -y\napt-get install traceroute -y\napt-get install ping -y\napt-get install iputils-ping -y\n</code></pre> ubuntu beaker install<pre><code>sudo apt-get install -y ruby-dev libxml2-dev libxslt1-dev g++ zlib1g-dev bundler\ngit clone https://github.com/puppetlabs/beaker\ncd beaker\nsudo bundle install\n</code></pre> ubuntu docker install<pre><code>apt-get update\napt-get install ca-certificates curl gnupg lsb-release software-properties-common\nmkdir -p /etc/apt/keyrings\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg\necho \\\n  \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\\n  $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\napt-get update\napt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin\nservice docker start\nsystemctl enable docker.service\nsystemctl enable containerd.service\n</code></pre> ubuntu git install<pre><code>apt-get update\napt-get install -y git\n</code></pre> ubuntu go install<pre><code>wget https://go.dev/dl/go1.19.3.linux-amd64.tar.gz\nrm -rf /usr/local/go &amp;&amp; tar -C /usr/local -xzf go1.19.3.linux-amd64.tar.gz\nexport PATH=$PATH:/usr/local/go/bin\ngo version\n</code></pre> ubuntu ping install<pre><code>apt-get update\napt-get install -y iputils-ping\n</code></pre> ubuntu pdk install<pre><code>wget https://apt.puppet.com/puppet-tools-release-jammy.deb\nsudo dpkg -i puppet-tools-release-jammy.deb\nsudo apt-get -y update\nsudo apt-get install -y pdk\nrm puppet-tools-release-jammy.deb\n</code></pre> ubuntu pre-commit install<pre><code>sudo apt install pre-commit -y\n</code></pre> ubuntu python3.12 install<pre><code>sudo apt install software-properties-common -y\nsudo add-apt-repository --yes ppa:deadsnakes/ppa\nsudo apt update -y\nsudo apt install python3.12 -y\nsudo update-alternatives --install /usr/local/bin/python python3 /usr/bin/python3.12 2\n</code></pre> ubuntu python3-pip install<pre><code>apt-get update\napt-get -y upgrade\napt-get install -y python3-pip\napt-get install -y apt-utils build-essential libssl-dev libffi-dev python3-dev\n</code></pre> <p>```bash title=\"ubuntu ssh install\"  # (1) apt-get update apt-get install -y openssh-server <pre><code>1.  :man_raising_hand: Allows ssh connection to the server.\n\n```bash title=\"ubuntu terraform install\"\napt-get update\napt-get install -y apt-utils gnupg software-properties-common curl\ncurl -s https://apt.releases.hashicorp.com/gpg | gpg --dearmor &gt; hashicorp.gpg\ninstall -o root -g root -m 644 hashicorp.gpg /etc/apt/trusted.gpg.d/\napt-add-repository -y \"deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main\"\napt-get update\napt-get install terraform\n</code></pre></p> ubuntu tree install<pre><code>apt-get update\napt-get install -y tree\n</code></pre> ubuntu python3-pip install<pre><code>sudo apt-get install wget gpg\nwget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor &gt; packages.microsoft.gpg\nsudo install -D -o root -g root -m 644 packages.microsoft.gpg /etc/apt/keyrings/packages.microsoft.gpg\nsudo sh -c 'echo \"deb [arch=amd64,arm64,armhf signed-by=/etc/apt/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main\" &gt; /etc/apt/sources.list.d/vscode.list'\nrm -f packages.microsoft.gpg\n</code></pre>"},{"location":"snippet/windows/","title":"Windows","text":"windows openssh ssh client install<pre><code>Add-WindowsCapability -Online -Name OpenSSH.Client # (1)\nGet-Service ssh-agent | Set-Service -StartupType Automatic\nStart-Service ssh-agent\n</code></pre> windows openssh ssh server install<pre><code>Add-WindowsCapability -Online -Name OpenSSH.Server~~~~0.0.1.0 # (2)\nStart-Service -Name sshd\nSet-Service -Name sshd -StartupType 'Automatic'\n</code></pre> <ol> <li> Prerequisite for git to work. Requires admin privilege.</li> <li> Allows ssh connection to the server. Requires admin privilege.</li> </ol>"},{"location":"wiki/reset_firewalld/","title":"Reset firewalld","text":"reset firewalld<pre><code>sudo systemctl stop firewalld\nsudo yum reinstall firewalld\nsudo systemctl start firewalld\nsudo systemctl enable firewalld\nsudo systemctl status firewalld\nsudo ls /etc/firewalld/\n</code></pre>"},{"location":"wiki/set_network_ip_alias/","title":"Set network ip alias","text":""},{"location":"wiki/set_network_ip_alias/#set-network-ip-address-alias-to-a-nic-redhat","title":"set network ip address alias to a nic (redhat)","text":"<p>Assuming there's only one nic</p> <ul> <li>this directory will have one config file and if it maybe ifcfg-eth0.</li> <li>create one file for each alias, it would like this below if you need two aliases.</li> </ul> <pre><code># tree /etc/sysconfig/network-scripts\n/etc/sysconfig/network-scripts\n\u251c\u2500\u2500 ifcfg-eth0\n\u251c\u2500\u2500 ifcfg-eth0:0\n\u2514\u2500\u2500 ifcfg-eth0:1\n</code></pre> <ul> <li>each new config file would look like this.</li> </ul> <pre><code># cat /etc/sysconfig/network-scripts/ifcfg-eth0:0\nDEVICE=eth0:0\nONBOOT=yes\nONPARENT=yes\nIPADDR=192.168.122.100\nNETMASK=255.255.255.0\n</code></pre> <pre><code># cat /etc/sysconfig/network-scripts/ifcfg-eth0:1\nDEVICE=eth0:1\nONBOOT=yes\nONPARENT=yes\nIPADDR=192.168.123.100\nNETMASK=255.255.255.0\n</code></pre>"},{"location":"wiki/shell/","title":"Shell","text":"shell named dns configuration path<pre><code>/etc/named.conf\n/var/named/chroot/etc/named.conf\n</code></pre>"},{"location":"wiki/ssh/","title":"Ssh","text":"ssh  ~/.ssh/config sample<pre><code>Host github.com\n   HostName github.com\n   IdentityFile ~/.ssh/id_ed25519_github\n   IdentitiesOnly yes\n</code></pre>"}]}